(* -*- compile-command: "ocamlbuild -classic-display dissect.pdf && evince _build/dissect.pdf" -*- *)

##verbatim '%' = MuPlugin.mumode

open Prelude
open Extra
(* arnaud: note, la fonte pour sans serif (textsf) a l'air de n'être
   pas à la même taille que celle de la fonte romane… ça n'est
   pas très beau. *)
(* arnaud: fix le kerning de ?, en particulier ?0 *)
(* arnaud: un mode ocaml pour <@@> *)
(* arnaud: noter que les duaux apparaissent face-à-face dans les figures *)

(*** doc ***)
(* arnaud: ne pas oublier l'abstract *)
let abstract = "This article describes a one-sided variant of system~{muname} whose typing corresponds to linear sequent calculus and its application. A polarised version of the system is introduced to control the reduction strategy. The polarised type system is then extended to dependent linear types. The system with dependent type supports dependent elimination of positive connectives."

let intro = Intro.d

let coremu = Core.d

let llmu = Linear.d

let examples = Example.d

let focusing = Polarised.d

let dependent = Dependent.d

let concl = "{section' "Conclusion"}

Linear~{muname}, together with its polarised and dependent flavours, is a rich toolkit which models a wide variety of phenomena in programming languages. It is very expressive, with many features from programming languages being macro-expressible in linear and polarised~{muname}.

A testimony to the robustness of the diverse variants is that the macros -- {lambda}-abstraction and deep pattern matching -- defined for linear~{muname} are left unchanged in polarised and dependent~{muname}. Only their typing evolves. Though polarised {muname} enforces a strong call-by-value style restriction, which forces translations from programming language to be more complex (but still macros) as we have finer control on their behaviour. This expressiveness makes linar~{muname} and its variants good candidates both as intermediate languages and as programming languages.

Dependent~{muname} gives a novel account of dependent types, where positive connectives -- hence dependent elimination -- are an essential part of the design. The limitations of dependent~{muname} clearly have to be addressed in the future. In particular, the lack of strong elimination. In a sense the types of dependent~{muname} are values, but strong elimination mandates that they be computations. This is still unclear what it would mean in this context, however. It is nonetheless desirable to expand the expressiveness of dependent~{muname} to have a family of system of the same kind as {textsc"pts"}, which requires strong elimination.

To give a more realistic account of programming languages (with or without dependent types), the logical types should be extended with inductive types. In the context of one-sided sequent calculus, the dual of an inductive type would be a co-inductive type. Inductive types would be positive, and hence introduced by values and eliminated by recursive fixed points (presumably defined by pattern-matching). Dually, co-inductive types are introduced by recursive fixed points and eliminated by values. This would validate the co-pattern point of view, heralded for instance in~{cite"Abel2013"}.
"

let d = concat [
  Intro.d;
  Core.d;
  Linear.d;
  Example.d;
  Polarised.d;
  Dependent.d;
  concl;
(*  command \"bibliography\" [A,"library"] A;*)
  environment \"bibliography\" ~args:[A,"library"] (A,empty) A;
]

let _test = "{Infer.rule ~label:(mathrm $Dummy$) ["<%<mu x, c|y>%>"] "<%A<*>B%>"}"
      
(*** boilerplate ***)

let title = "A dissection of {muname}"
let authors = [
  { name = "Arnaud Spiwack";
    email = Some "arnaud@spiwack.net";
    address = "Inria -- {textsc"Ens"} -- Paris, France"
      (* arnaud: v'erifier le style des affiliations dans lmcs *)
  };
]

let keywords = [
  "Sequent calculus";
  "Dependent types";
  "Linear logic";
  "Polarised logic";
  "System L";
(*  "μμ̃"; Confuses latex *)
]

let acmclass = [
  (* "F.3.1"; (\* (un peu douteux) Specifying, and verifying and reasoning about programs http://dl.acm.org/ccs.cfm?part=author&coll=DL&dl=ACM&row=F.3.1&idx=6&idx2=F.3.1&idx3=3&query=Subject%3A%22Logics%20of%20programs%22&CFID=83889239&CFTOKEN=84492988 *\) *)
  "F.3.3"; (* (moins douteux) Studies of program constructs http://dl.acm.org/ccs.cfm?part=author&coll=DL&dl=ACM&row=F.3.3&idx=6&idx2=F.3.3&idx3=5&query=Subject%3A%22Type%20structure%22&CFID=83889239&CFTOKEN=84492988 *)
]

let packages = [
  "inputenc" , "utf8" ;
  "fontenc" , "T1" ;
  "textcomp", "";
  "microtype" , "" ;
]

let prelude = concat_with_sep [
  (* command \"bibliographystyle\" [A,"alpha"] A; *)
] par

let file = \"dissect.tex\"

let _ = emit ~file (document
		             ~title
			     ~authors
                             ~keywords
                             ~acmclass
			     ~prelude
			     ~packages
                             ~abstract
			     d)

(* arnaud: random trucs sur la version polarisee:

have: t:A -o N , u:↓A
need: N

μk.⟨ μ⇓x.⟨ t x | k ⟩ | u ⟩


have: t:A -o N, u:↓A, k:N~
need: command

⟨ μ⇓x.⟨ t x | k ⟩ | u ⟩

have: t:A -o N, x:A, k:N~
need: command

⟨ t x | k ⟩


=====================================================

Unary product

Γ ⊢v t:A
————————
Γ ⊢v (t):⊗A


have: t:↓A
need: ↓⊗A

μk.⟨ μ⇓x.⟨ k | ⇓(x) ⟩ | t ⟩

have: t:↓A k:↑(⊗A)~
need: command

⟨ μ⇓x.⟨ k | ⇓(x) ⟩ | t ⟩

have x:A, k:↑(⊗A)~
need command

⟨ k | ⇓(x) ⟩

=====================================================

have x:↓↑↓A
need ↓A

μk.⟨ μ⇓y. ⟨ ⇓k | y ⟩ | x ⟩

have x:↓↑↓A, k:↑A~
need command

⟨ μ⇓y. ⟨ ⇓k | y ⟩ | x ⟩

have y:↑↓A k:↑A~
need command

⟨ ⇓k | y ⟩

*)
