##verbatim '%' = MuPlugin.mumode

open Prelude

module Syntax = struct
  let var = "<%x%>"
  let mu = "<%mu x,c%>"
  let core = [ var ; mu ]

  let pair = "<%(t,u)%>"
  let copair = "<%mu(x,u),c%>"
  let unit = "<%()%>"
  let counit = "<%mu(),c%>"
  let multiplicative = [ pair ; copair ; unit ; counit ]

  let iota1 = "<%1.t%>"
  let iota2 = "<%2.t%>"
  let case =  "<%{mu(1.x),c_1 , mu(2.y),c_2}%>"
  let emptycase = "<%{}%>"
  let additive = [ iota1 ; iota2 ; case ; emptycase ]

  let bang = "<%|_t_|%>"
  let cobang = "<%mu|_x_|,c%>"
  let exponential = [ bang;cobang ]

  let shiftp = "<%val t%>"
  let shiftn = "<%mu\(val x\), c%>"
  let shift = [ shiftp;shiftn ]
end

module Reduction = struct
  let mu = array_line ["<%<t|mu x,c>%>";"<%subst [t,x] c%>"]
  let core = [mu]

  let pair = array_line ["<%<(t,u)|mu(x,y),c>%>";"<%subst [t,x ; u,y] c%>"]
  let unit = array_line ["<%<()|mu(),c>%>";"<%c%>"]
  let multiplicative = [ pair ; unit ]

  let iota1 = array_line ["<%<1.t|{mu(1.x),c_1,mu(2.y),c_2}>%>";"<%subst [t,x] c_1%>" ]
  let iota2 = array_line ["<%<2.t|{mu(1.x),c_1,mu(2.y),c_2}>%>";"<%subst [t,y] c_2%>"]
  let additive = [ iota1 ; iota2 ]

  let exponential = [ array_line [ "<%<|_t_| | mu|_x_|,c>%>" ; "<%subst [t,x] c%>"] ]

  let shift = [ array_line [ "<%< mu\(val x\),c | val t >%>" ; "<%subst [t,x] c%>"] ]
end

module Types = struct

    module Polarised = struct

        let shiftn = "<%shiftn N%>"
        let shiftp = "<%shiftp P%>"

        let prod = "<%A<*>B%>"
        let coprod = "<%N`&M%>"
        let unit = "<%1%>"
        let bot = "<%bot%>"

        let sum = "<%A<+>B%>"
        let cosum = "<%A&B%>"
        let top = "<%top%>"
        let zero = "<%0%>"

        let bang = "<%!A%>"
        let maybe = "<%?A%>"

        let positive = [ prod ; unit ; sum ; zero ; bang ; shiftn ; ]
        let negative = [ coprod ; bot ; cosum ; top ; maybe ; shiftp ;]

    end

end

module Typing = struct
  module Classical = struct
    let id = Infer.rule ~label:idrule [] "<%Gamma,x:A|-x:A%>"
    let mu = Infer.rule ~label:mu ["<%Gamma, x:A|-c%>"] "<%Gamma|- mu x,c : A^~%>"
    let cut = Infer.rule ~label:cutrule ["<%Gamma|-t:A%>";"<%Gamma|-u:A^~%>"] "<%Gamma|-<t|u>%>"
  end

  module Mall = struct
    let id = Infer.rule ~label:idrule [] "<%x:A|-x:A%>"
    let mu = Infer.rule ~label:mu ["<%Gamma, x:A|-c%>"] "<%Gamma|- mu x,c : A^~%>"
    let cut = Infer.rule ~label:cutrule ["<%Gamma|-t:A%>";"<%Delta|-u:A^~%>"] "<%Gamma,Delta|-<t|u>%>"

    let pair = Infer.rule ~label:tensor ["<%Gamma|-t:A%>"; "<%Delta|-u:B%>"] "<%Gamma,Delta|-(t,u):A<*>B%>"
    let copair = Infer.rule ~label:parr ["<%Gamma,x:A,y:B|-c%>"] "<%Gamma|-mu(x,y),c:A^~`&B^~%>"
    let unit = Infer.rule ~label:one [] "<%|-():1%>"
    let counit = Infer.rule ~label:bottom ["<%Gamma|-c%>"] "<%Gamma|- mu (),c:bot%>"

    let iota1 = Infer.rule ~label:iota1rule ["<%Gamma|-t:A%>"] "<%Gamma|- 1.t : A<+>B%>"
    let iota2 = Infer.rule ~label:iota2rule ["<%Gamma|-u:B%>"] "<%Gamma|- 2.u : A<+>B%>"
    let case = Infer.rule ~label:withc ["<%Gamma,x:A|-c_1%>";"<%Gamma,y:B|-c_2%>"] "<%Gamma|- {mu(1.x),c_1 , mu(2.y),c_2} : A^~&B^~%>"
    let emptycase = Infer.rule ~label:top [] "<%Gamma|-{}:top%>"
    let zero = "No rule for {zero}"

    let lambda = Infer.rule ~label:lambda ["<%Gamma,x:A|-t:B%>"] "<%Gamma|-lambda x,t: A-oB%>"
    let app = Infer.rule ~label:apprule ["<%Gamma|-t:A-oB%>";"<%Gamma|-u:A%>"] "<%Gamma|-t u:B%>"
    let record = Infer.rule ~label:recordrule ["<%Gamma|-t:A%>";"<%Gamma|-u:B%>"] "<%Gamma|-{1=t,2=u} : A&B%>"
    let pi1 = Infer.rule ~label:pi1rule ["<%Gamma|-t:A&B%>"] "<%Gamma|-t.1:A%>"
    let pi2 = Infer.rule ~label:pi2rule ["<%Gamma|-t:A&B%>"] "<%Gamma|-t.2:B%>"
  end

  module Ll = struct
    let id = Infer.rule ~label:idrule [] "<%Xi;x:A|-x:A%>"
    let iddup = Infer.rule ~label:iddup [] "<%Xi,x:A;|-x:A%>"
    let mu = Infer.rule ~label:mu ["<%Xi;Gamma, x:A|-c%>"] "<%Xi;Gamma|- mu x,c : A^~%>"
    let cut = Infer.rule ~label:cutrule ["<%Xi;Gamma|-t:A%>";"<%Xi;Delta|-u:A^~%>"] "<%Xi;Gamma,Delta|-<t|u>%>"

    let pair = Infer.rule ~label:tensor ["<%Xi;Gamma|-t:A%>"; "<%Xi;Delta|-u:B%>"] "<%Xi;Gamma,Delta|-(t,u):A<*>B%>"
    let copair = Infer.rule ~label:parr ["<%Xi;Gamma,x:A,y:B|-c%>"] "<%Xi;Gamma|-mu(x,y),c:A^~`&B^~%>"
    let unit = Infer.rule ~label:one [] "<%Xi;|-():1%>"
    let counit = Infer.rule ~label:bottom ["<%Xi;Gamma|-c%>"] "<%Xi;Gamma|- mu (),c:bot%>"

    let iota1 = Infer.rule ~label:iota1rule ["<%Xi;Gamma|-t:A%>"] "<%Xi;Gamma|- 1.t : A<+>B%>"
    let iota2 = Infer.rule ~label:iota2rule ["<%Xi;Gamma|-u:B%>"] "<%Xi;Gamma|- 2.u : A<+>B%>"
    let case = Infer.rule ~label:withc ["<%Xi;Gamma,x:A|-c_1%>";"<%Xi;Gamma,y:B|-c_2%>"] "<%Xi;Gamma|- {mu(1.x),c_1 , mu(2.y),c_2} : A^~&B^~%>"
    let emptycase = Infer.rule ~label:top [] "<%Xi;Gamma|-{}:top%>"
    let zero = "No rule for {zero}"

    let bang = Infer.rule ~label:bangrule ["<%Xi;|-t:A%>"] "<%Xi;|-|_t_|:!A%>"
    let whynot = Infer.rule ~label:whynotrule ["<%Xi,x:A;Gamma|-c%>"] "<%Xi;Gamma|-mu|_x_|,c:?A^~%>"

    let lambda = Infer.rule ~label:lambda ["<%Xi;Gamma,x:A|-t:B%>"] "<%Xi;Gamma|-lambda x,t: A-oB%>"
    let app = Infer.rule ~label:apprule ["<%Xi;Gamma|-t:A-oB%>";"<%Xi;Gamma|-u:A%>"] "<%Xi;Gamma|-t u:B%>"
    let record = Infer.rule ~label:recordrule ["<%Xi;Gamma|-t:A%>";"<%Xi;Gamma|-u:B%>"] "<%Xi;Gamma|-{1=t,2=u} : A&B%>"
    let pi1 = Infer.rule ~label:pi1rule ["<%Xi;Gamma|-t:A&B%>"] "<%Xi;Gamma|-t.1:A%>"
    let pi2 = Infer.rule ~label:pi2rule ["<%Xi;Gamma|-t:A&B%>"] "<%Xi;Gamma|-t.2:B%>"

    module Patterns = struct

      let id = Infer.rule ~label:idrule [] "<%;x:A |-_p x:A%>"
      let iddup = Infer.rule ~label:Prelude.iddup [] "<%x:A;|-_p |_x_|:!A%>"
      let one = Infer.rule ~label:one [] "<%|-_p ():1%>"
      let pair = Infer.rule ~label:tensor ["<%Xi;Gamma|-_p p:A%>";"<%Theta;Delta|-_p q:B%>"] "<%Xi,Theta;Gamma,Delta|-_p (p,q):A<*>B%>"

    end
  end

  module Fll = struct
    let id = Infer.rule ~label:idrule [] "<%Xi;x:A|-_v x:A%>"
    let iddup = Infer.rule ~label:iddup [] "<%Xi,x:A;|-_v x:A%>"
    let mu = Infer.rule ~label:mu ["<%Xi;Gamma, x:A|-c%>"] "<%Xi;Gamma|- mu x,c : A^~%>"
    let cut = Infer.rule ~label:cutrule ["<%Xi;Gamma|-_v t:A%>";"<%Xi;Delta|-u:A^~%>"] "<%Xi;Gamma,Delta|-<t|u>%>"

    let pair = Infer.rule ~label:tensor ["<%Xi;Gamma|-_v t:A%>"; "<%Xi;Delta|-_v u:B%>"] "<%Xi;Gamma,Delta|-_v (t,u):A<*>B%>"
    let copair = Infer.rule ~label:parr ["<%Xi;Gamma,x:A,y:B|-c%>"] "<%Xi;Gamma|-mu(x,y),c:A^~`&B^~%>"
    let unit = Infer.rule ~label:one [] "<%Xi;|-_v ():1%>"
    let counit = Infer.rule ~label:bottom ["<%Xi;Gamma|-c%>"] "<%Xi;Gamma|- mu (),c:bot%>"

    let iota1 = Infer.rule ~label:iota1rule ["<%Xi;Gamma|-_v t:A%>"] "<%Xi;Gamma|-_v 1.t : A<+>B%>"
    let iota2 = Infer.rule ~label:iota2rule ["<%Xi;Gamma|-_v u:B%>"] "<%Xi;Gamma|-_v 2.u : A<+>B%>"
    let case = Infer.rule ~label:withc ["<%Xi;Gamma,x:A|-c_1%>";"<%Xi;Gamma,y:B|-c_2%>"] "<%Xi;Gamma|- {mu(1.x),c_1 , mu(2.y),c_2} : A^~&B^~%>"
    let emptycase = Infer.rule ~label:top [] "<%Xi;Gamma|-{}:top%>"
    let zero = "No rule for {zero}"

    let bang = Infer.rule ~label:bangrule ["<%Xi;|-_v t:A%>"] "<%Xi;|-_v |_t_|:!A%>"
    let whynot = Infer.rule ~label:whynotrule ["<%Xi,x:A;Gamma|-c%>"] "<%Xi;Gamma|-mu|_x_|,c:?A^~%>"

    let shiftp = Infer.rule ~label:positiveshift ["<%Xi;Gamma|-_v t : A%>"] "<%Xi;Gamma|- val t : shiftp A%>"
    let shiftn = Infer.rule ~label:negativeshift ["<%Xi;Gamma,x:A|-c%>"] "<%Xi;Gamma|-_v mu\(val x\), c : shiftn A^~%>"

    (* arnaud: règles dérivées: todo *)
    let lambda = Infer.rule ~label:lambda ["<%Xi;Gamma,x:A|-t:B%>"] "<%Xi;Gamma|-lambda x,t: A-oB%>"
    let app = Infer.rule ~label:apprule ["<%Xi;Gamma|-t:A-oB%>";"<%Xi;Gamma|-u:A%>"] "<%Xi;Gamma|-t u:B%>"
    let record = Infer.rule ~label:recordrule ["<%Xi;Gamma|-t:A%>";"<%Xi;Gamma|-u:B%>"] "<%Xi;Gamma|-{1=t,2=u} : A&B%>"
    let pi1 = Infer.rule ~label:pi1rule ["<%Xi;Gamma|-t:A&B%>"] "<%Xi;Gamma|-t.1:A%>"
    let pi2 = Infer.rule ~label:pi2rule ["<%Xi;Gamma|-t:A&B%>"] "<%Xi;Gamma|-t.2:B%>"
  end

  module Dll0 = struct
    let id = Infer.rule ~label:idrule ["<%Xi,Theta|-A:Type%>"] "<%Xi;Theta;x:A|-_v x:A%>"
    let iddup = Infer.rule ~label:iddup ["<%Xi|-A:Type%>"] "<%Xi,x:A;Theta;|-_v x:A%>"
    let mu = Infer.rule ~label:mu ["<%Xi;Gamma, x:A,Psi|-c%>"] "<%Xi;Gamma|- mu x,c : A^~%>"
    let cut = Infer.rule ~label:cutrule ["<%Xi;Theta;Gamma|-_v t:A%>";"<%Xi;Theta,Delta|-u:A^~%>"] "<%Xi;Theta,Gamma,Delta|-<t|u>%>"

    (* arnaud: well-formedness du Sigma et du Pi, dans Dll1 aussi *)
    let pair = Infer.rule ~label:tensor ["<%Xi;Theta;Gamma|-_v t:A%>"; "<%Xi;Theta;Delta|-_v u:subst [t,x] B%>"] "<%Xi;Theta;Gamma,Delta|-_v (t,u):SIGMA x:A, B%>"
    let copair = Infer.rule ~label:parr ["<%Xi;Gamma,x:A,y:B|-c%>"] "<%Xi;Gamma|-mu(x,y),c:PI x:A, B^~%>"
    let unit = Infer.rule ~label:one [] "<%Xi;Theta;|-_v ():1%>"
    let counit = Infer.rule ~label:bottom ["<%Xi;Gamma|-c%>"] "<%Xi;Gamma|- mu (),c:bot%>"

    let iota1 = Infer.rule ~label:iota1rule ["<%Xi;Theta;Gamma|-_v t:A%>"] "<%Xi;Theta;Gamma|-_v 1.t : A<+>B%>"
    let iota2 = Infer.rule ~label:iota2rule ["<%Xi;Theta;Gamma|-_v u:B%>"] "<%Xi;Theta;Gamma|-_v 2.u : A<+>B%>"
    let case = Infer.rule ~label:withc ["<%Xi;Gamma,x:A|-c_1%>";"<%Xi;Gamma,y:B|-c_2%>"] "<%Xi;Gamma|- {mu(1.x),c_1 , mu(2.y),c_2} : A^~&B^~%>"
    let emptycase = Infer.rule ~label:top [] "<%Xi;Gamma|-{}:top%>"
    let zero = "No rule for {zero}"

    let bang = Infer.rule ~label:bangrule ["<%Xi;Theta;|-_v t:A%>"] "<%Xi;Theta;|-_v |_t_|:!A%>"
    let whynot = Infer.rule ~label:whynotrule ["<%Xi,x:A;Gamma|-c%>"] "<%Xi;Gamma|-mu|_x_|,c:?A^~%>"

    let shiftp = Infer.rule ~label:positiveshift ["<%Xi;Gamma|-_v t : A%>"] "<%Xi;Gamma|- val t : shiftp A%>"
    let shiftn = Infer.rule ~label:negativeshift ["<%Xi;Theta;Gamma,x:A|-c%>"] "<%Xi;Theta;Gamma|-_v mu\(val x\), c : shiftn A^~%>"

    (* arnaud: règles dérivées: todo *)
    let lambda = Infer.rule ~label:lambda ["<%Xi;Gamma,x:A|-t:B%>"] "<%Xi;Gamma|-lambda x,t: A-oB%>"
    let app = Infer.rule ~label:apprule ["<%Xi;Gamma|-t:A-oB%>";"<%Xi;Gamma|-u:A%>"] "<%Xi;Gamma|-t u:B%>"
    let record = Infer.rule ~label:recordrule ["<%Xi;Gamma|-t:A%>";"<%Xi;Gamma|-u:B%>"] "<%Xi;Gamma|-{1=t,2=u} : A&B%>"
    let pi1 = Infer.rule ~label:pi1rule ["<%Xi;Gamma|-t:A&B%>"] "<%Xi;Gamma|-t.1:A%>"
    let pi2 = Infer.rule ~label:pi2rule ["<%Xi;Gamma|-t:A&B%>"] "<%Xi;Gamma|-t.2:B%>"
  end

  module Dtypes = struct

    let one = Infer.rule [] "<%Theta|-1%>"
    let bot = Infer.rule [] "<%Theta|-bot%>"
    let tensor = Infer.rule ["<%Theta|-A%>";"<%Theta,x:A|-B%>"] "<%Theta|-SIGMA x:A,B%>"
    let par = Infer.rule ["<%Theta|-A%>";"<%Theta,x:A|-N%>"] "<%Theta|-PI x:A,N%>"
    let top = Infer.rule [] "<%Theta|-top%>"
    let zero = Infer.rule [] "<%Theta|-0%>"
    let plus = Infer.rule ["<%Theta|-A%>";"<%Theta|-B%>"] "<%Theta|-A<+>B%>"
    let witha = Infer.rule ["<%Theta|-N%>";"<%Theta|-M%>"] "<%Theta|-N&M%>"
    let shiftp = Infer.rule ["<%Theta|-A%>"] "<%Theta|-shiftp A%>"
    let shiftn = Infer.rule ["<%Theta|-N%>"] "<%Theta|-shiftn N%>"
    let bang = Infer.rule ["<%Theta|-A%>"] "<%Theta|-!A%>"
    let whynot = Infer.rule ["<%Theta|-N%>"] "<%Theta|-?N%>"

  end

  module Dll1 = struct




    let id = Infer.rule ~label:idrule ["<%Xi,Theta|-A:Type%>"] "<%Xi;Theta;x:A|-_v x:A%>"
    let iddup = Infer.rule ~label:iddup ["<%Xi|-A:Type%>"] "<%Xi,x:A,Psi;Theta;|-_v x:A%>"
    let mu = Infer.rule ~label:mu ["<%Xi;Gamma, x:A,subst [x,cv] Gamma_cv|-c%>"] "<%Xi;Gamma,Gamma_cv|- mu x,c : A^~%>"
    let cut = Infer.rule ~label:cutrule ["<%Xi;Theta;Gamma|-_v t:A%>";"<%Xi;Theta,Delta_cv|-u:A^~%>"] "<%Xi;Theta,Gamma,subst [t,cv] Delta_cv|-<t|u>%>"

    let pair = Infer.rule ~label:tensor ["<%Xi;Theta;Gamma|-_v t:A%>"; "<%Xi;Theta;Delta|-_v u:subst [t,x] B%>"] "<%Xi;Theta;Gamma,Delta|-_v (t,u):SIGMA x:A, B%>"
    let copair = Infer.rule ~label:parr ["<%Xi;Gamma,x:A,y:B,subst [(x,y),cv] Gamma_cv|-c%>"] "<%Xi;Gamma,Gamma_cv|-mu(x,y),c:PI x:A, B^~%>"
    let unit = Infer.rule ~label:one [] "<%Xi;Theta;|-_v ():1%>"
    let counit = Infer.rule ~label:bottom ["<%Xi;Gamma,subst [(),cv] Gamma_cv|-c%>"] "<%Xi;Gamma,Gamma_cv|- mu (),c:bot%>"

    let iota1 = Infer.rule ~label:iota1rule ["<%Xi;Theta;Gamma|-_v t:A%>"] "<%Xi;Theta;Gamma|-_v 1.t : A<+>B%>"
    let iota2 = Infer.rule ~label:iota2rule ["<%Xi;Theta;Gamma|-_v u:B%>"] "<%Xi;Theta;Gamma|-_v 2.u : A<+>B%>"
    let case = Infer.rule ~label:withc ["<%Xi;Gamma,x:A,subst [1.x,cv] Gamma_cv|-c_1%>";"<%Xi;Gamma,y:B,subst [2.y,cv] Gamma_cv |-c_2%>"] "<%Xi;Gamma,Gamma_cv|- {mu(1.x),c_1 , mu(2.y),c_2} : A^~&B^~%>"
    let emptycase = Infer.rule ~label:top [] "<%Xi;Gamma,Gamma_cv|-{}:top%>"
    let zero = "No rule for {zero}"

    let bang = Infer.rule ~label:bangrule ["<%Xi;Theta;|-_v t:A%>"] "<%Xi;Theta;|-_v |_t_|:!A%>"
    let whynot = Infer.rule ~label:whynotrule ["<%Xi,x:A;subst [|_x_|,cv] Gamma_cv|-c%>"] "<%Xi;Gamma_cv|-mu|_x_|,c:?A^~%>"

    let shiftp = Infer.rule ~label:positiveshift ["<%Xi;Gamma|-_v t : A%>"] "<%Xi;Gamma|- val t : shiftp A%>"
    let shiftn = Infer.rule ~label:negativeshift ["<%Xi;Gamma,x:A|-c%>"] "<%Xi;Theta;Gamma|-_v mu\(val x\), c : shiftn A^~%>"

    (* arnaud: règles dérivées: todo *)
    let lambda = Infer.rule ~label:lambda ["<%Xi;Gamma,x:A|-t:B%>"] "<%Xi;Gamma|-lambda x,t: A-oB%>"
    let app = Infer.rule ~label:apprule ["<%Xi;Gamma|-t:A-oB%>";"<%Xi;Gamma|-u:A%>"] "<%Xi;Gamma|-t u:B%>"
    let record = Infer.rule ~label:recordrule ["<%Xi;Gamma|-t:A%>";"<%Xi;Gamma|-u:B%>"] "<%Xi;Gamma|-{1=t,2=u} : A&B%>"
    let pi1 = Infer.rule ~label:pi1rule ["<%Xi;Gamma|-t:A&B%>"] "<%Xi;Gamma|-t.1:A%>"
    let pi2 = Infer.rule ~label:pi2rule ["<%Xi;Gamma|-t:A&B%>"] "<%Xi;Gamma|-t.2:B%>"
  end
end

