(* -*- compile-command: "ocamlbuild -classic-display dissect.pdf && evince _build/dissect.pdf" -*- *)

##verbatim '%' = MuPlugin.mumode

open Prelude
open Extra
(* arnaud: note, la fonte pour sans serif (textsf) a l'air de n'être
   pas à la même taille que celle de la fonte romane… ça n'est
   pas très beau. *)
(* arnaud: fix le kerning de ?, en particulier ?0 *)
(* arnaud: un mode ocaml pour <@@> *)
(* arnaud: noter que les duaux apparaissent face-à-face dans les figures *)
(* arnaud: Wadler's writeup and Harper's natural deduction classical logic should be mentionned in intro *)

(*** doc ***)
(* arnaud: ne pas oublier l'abstract *)
let abstract = "There will be an abstract some day."

let intro = Intro.d

let coremu = Core.d

let llmu = Linear.d

let examples = Example.d

let focusing = Polarised.d

let dependent = Dependent.d

let d = concat [
  Intro.d;
  Core.d;
  Linear.d;
  Example.d;
  Polarised.d;
  Dependent.d;
(*  command \"bibliography\" [A,"library"] A;*)
  environment \"bibliography\" ~args:[A,"library"] (A,empty) A;
]

let _test = "{Infer.rule ~label:(mathrm $Dummy$) ["<%<mu x, c|y>%>"] "<%A<*>B%>"}"
      
(*** boilerplate ***)

let title = "A dissection of {muname}"
let authors = [
  { name = "Arnaud Spiwack";
    email = Some "arnaud@spiwack.net";
    address = "Inria -- {textsc"Ens"} -- Paris, France"
      (* arnaud: v'erifier le style des affiliations dans lmcs *)
  };
]

let keywords = [
  "Sequent calculus";
  "Dependent types";
  "Linear logic";
  "Polarised logic";
  "System L";
(*  "μμ̃"; Confuses latex *)
]

let acmclass = [
  "F.3.1"; (* (un peu douteux) Specifying, and verifying and reasoning about programs http://dl.acm.org/ccs.cfm?part=author&coll=DL&dl=ACM&row=F.3.1&idx=6&idx2=F.3.1&idx3=3&query=Subject%3A%22Logics%20of%20programs%22&CFID=83889239&CFTOKEN=84492988 *)
  "F.3.3"; (* (moins douteux) Studies of program constructs http://dl.acm.org/ccs.cfm?part=author&coll=DL&dl=ACM&row=F.3.3&idx=6&idx2=F.3.3&idx3=5&query=Subject%3A%22Type%20structure%22&CFID=83889239&CFTOKEN=84492988 *)
]

let packages = [
  "inputenc" , "utf8" ;
  "fontenc" , "T1" ;
  "textcomp", "";
  "microtype" , "" ;
]

let prelude = concat_with_sep [
  (* command \"bibliographystyle\" [A,"alpha"] A; *)
] par

let file = \"dissect.tex\"

let _ = emit ~file (document
		             ~title
			     ~authors
                             ~keywords
                             ~acmclass
			     ~prelude
			     ~packages
                             ~abstract
			     d)

(* arnaud: random trucs sur la version polarisee:

have: t:A -o N , u:↓A
need: N

μk.⟨ μ⇓x.⟨ t x | k ⟩ | u ⟩


have: t:A -o N, u:↓A, k:N~
need: command

⟨ μ⇓x.⟨ t x | k ⟩ | u ⟩

have: t:A -o N, x:A, k:N~
need: command

⟨ t x | k ⟩


=====================================================

Unary product

Γ ⊢v t:A
————————
Γ ⊢v (t):⊗A


have: t:↓A
need: ↓⊗A

μk.⟨ μ⇓x.⟨ k | ⇓(x) ⟩ | t ⟩

have: t:↓A k:↑(⊗A)~
need: command

⟨ μ⇓x.⟨ k | ⇓(x) ⟩ | t ⟩

have x:A, k:↑(⊗A)~
need command

⟨ k | ⇓(x) ⟩

=====================================================

have x:↓↑↓A
need ↓A

μk.⟨ μ⇓y. ⟨ ⇓k | y ⟩ | x ⟩

have x:↓↑↓A, k:↑A~
need command

⟨ μ⇓y. ⟨ ⇓k | y ⟩ | x ⟩

have y:↑↓A k:↑A~
need command

⟨ ⇓k | y ⟩

*)
